from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///Blog.db'
db = SQLAlchemy(app)

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True, nullable=False)
    nome = db.Column(db.String(100), nullable=False)

with app.app_context():
    db.create_all()

@app.route('/Criar_Post', methods=['POST'])
def Criar():
    data = request.json
    novo_post = Post(nome=data['nome'])
    db.session.add(novo_post)
    db.session.commit()
    return jsonify({"message": "Post adicionado com sucesso"}), 200


@app.route('/Lista', methods=['GET'])
def Lista():
    posts = Post.query.all()
    return jsonify([{'id': post.id, 'nome': post.nome} for post in posts]), 200

@app.route('/Lista/<int:id>', methods=['GET'])
def Especifico(id):
    post = Post.query.get(id)
    if post is None:
        return jsonify({"message": "Post não encontrado"}), 404
    return jsonify({
        'id': post.id,
        'nome': post.nome
    }), 200

@app.route('/Atualizar_Post/<int:id>', methods=['PUT'])
def Atualizacao(id):
    data = request.get_json()
    post = Post.query.get(id)
    if post is None:
        return jsonify({"message": "Post não encontrado"}), 404
    post.nome = data.get('nome', post.nome)
    db.session.commit()
    return jsonify({
        'id': post.id,
        'nome': post.nome
    }), 200

@app.route('/Deletar/<int:id>', methods=['DELETE'])
def Deletar(id):
    post = Post.query.get(id)
    if post is None:
        return jsonify({"message": "Post não encontrado"}), 404
    db.session.delete(post)
    db.session.commit()
    return jsonify({"message": "Post removido com sucesso"}), 200

if __name__ == '__main__':
    app.run(debug=True)
